str(training)
plot(training$visitsTumblr)
plot(training$X)
plot(training$visitsTumblr)
plot(training$visitsTumblr, training$date)
plot(training$date, training$visitsTumblr)
bat <- bats(training)
bat <- bats(training$visitsTumblr)
bat
fcast <- forecast(bat)
plot(fcast)
plot(tstrain)
bat <- bats(tstrain)
forecast(bat)
?forecast
plot(forecast(bat))
lines(testing$visitsTumblr)
?ts
?forecast
nrow(testing)
?bats
plot(bat)
?forecast
forecasting <- forecast(bat, h=235)
plot(forecasting)
lines(testing$visitsTumblr)
forecasting
str(forecasting)
names(forecasting)
forecasting[,1:6]
forecasting[1:6,]
forecasting$lower
forecasting$higher
forecasting$upper[1:6,]
low <- forecasting$lower
high <- forecasting$upper
low <- low[,2]
high <- high[,2]
length(low)
test <- testing$visitsTumblr
test > low & test<high
sum(test > low & test<high)
235-226
9/235
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(325)
library(e1071)
?e1071
str(training)
svm(training[,1:8], testing$CompressiveStrength)
nrow(training)
class(testing$CompressiveStrength)
length(testing$CompressiveStrength)
svm(training[,1:8], training$CompressiveStrength)
mod <- svm(training[,1:8], training$CompressiveStrength)
pre <- predict(mod, newdata = testing)
pre <- predict(mod, newdata = testing[,1:8])
pre
diff <- pre-testing$CompressiveStrength
diff <- diff^2
diff <- sum(diff)
sqrt(diff)
testing$CompressiveStrength
as.numeric(pre)
diff <- pre-testing$CompressiveStrength
summary(diff)
sq <- diff^2
summary(sq)
sq <- diff*diff
summary(sq)
24.5*24.5
sum(sq)
sum(sq)/length(testing$CompressiveStrength)
x <- \sum(sq)/length(testing$CompressiveStrength)
x <- sum(sq)/length(testing$CompressiveStrength)
sqrt(x)
quit()
install.packages("manipulate")
setwd("D/Fredwd/Coursera/DDP")
setwd("D:/Fredwd/Coursera/DDP")
library(caret)
training <- read.csv("pml-training.csv")
testing <- read.csv("pml-testing.csv")
inTrain <- createDataPartition(training$classe, p=0.7, list = FALSE)
train <- training[inTrain, ]
validate <- training[-inTrain,]
names(train)
ind <- numeric()
for (i in 1:ncol(train)){
if(is.na(train[,i])>0){
ind <- c(ind, i)
}
}
warnings()
for (i in 1:ncol(train)){
if(sum(is.na(train[,i])>0)){
ind <- c(ind, i)
}
}
ind
train <- train[,-ind]
names(train)
train$max_yaw_arm
sort(names(train))
train$max_yaw_belt
sumis.na(train$max_yaw_belt)
sum(is.na(train$max_yaw_belt))
str(max_yaw_belt)
str(trainmax_yaw_belt)
str(train$max_yaw_belt)
as.numeric(train$max_yaw_belt)
training <- read.csv("pml-training.csv", stringsAsFactors = FALSE)
testing <- read.csv("pml-testing.csv", stringsAsFactors = FALSE)
inTrain <- createDataPartition(training$classe, p=0.7, list = FALSE)
train <- training[inTrain, ]
validate <- training[-inTrain,]
as.numeric(train$max_yaw_belt)
as.numeric(train$new_window)
ind <- numeric()
for (i in 1:ncol(train)){
if(sum(is.na(train[,i])>0)){
ind <- c(ind, i)
}
}
train <- train[,-ind]
str(train)
ind <- numeric()
for (i in 1:ncol(train)){
if(sum(is.na(train[,i])>0) | sum(train[,i]=="")>0){
ind <- c(ind, i)
}
}
train <- training[inTrain, ]
ind <- numeric()
for (i in 1:ncol(train)){
if(sum(is.na(train[,i])>0) | sum(train[,i]=="")>0){
ind <- c(ind, i)
}
}
length(ind)
train[,c("user_name", "new_window", "classe")] <- factor (train[,c("user_name", "new_window", "classe")])
train[,c("user_name", "new_window", "classe")] <- as.factor (train[,c("user_name", "new_window", "classe")])
library(caret)
training <- read.csv("pml-training.csv", stringsAsFactors = FALSE)
testing <- read.csv("pml-testing.csv", stringsAsFactors = FALSE)
training$classe <- factor(training$classe)
inTrain <- createDataPartition(training$classe, p=0.7, list = FALSE)
train <- training[inTrain, ]
validate <- training[-inTrain,]
ind <- numeric()
for (i in 1:ncol(train)){
if(sum(is.na(train[,i])>0) | sum(train[,i]=="")>0){
ind <- c(ind, i)
}
}
train <- train[,-ind]
validate <- validate[,-ind]
names(train)
sort(names(train))
str(train)
sort(names(train))
attach(train)
qplot(total_accel_belt, yaw_forearm,col = classe, alpha= 0.1)
qplot(total_accel_belt, total_accel_forearm,col = classe, alpha= 0.1)
qplot(total_accel_belt, total_accel_forearm,col = classe, alpha= 0.1, scatter = 1)
qplot(total_accel_belt,fill = classe, alpha= 0.1)
qplot(total_accel_arm,fill = classe, alpha= 0.1)
qplot(total_accel_forearm,fill = classe, alpha= 0.1)
qplot(total_accel_belt,fill = classe, alpha= 0.1)
qplot(total_accel_belt, roll_forearm,col = classe, alpha= 0.1, scatter = 1)
qplot(total_accel_belt, roll_forearm,col = classe, alpha= 0.01, scatter = 1)
plot(total_accel_belt, roll_forearm,col = classe)
plot(total_accel_belt, roll_forearm,col = classe, pch = 19)
plot(total_accel_belt, roll_forearm,col = classe, pch = 19, scatter = 1)
?plot
qplot(pitch_belt, roll_belt,col = classe, alpha= 0.1)
qplot(yaw_belt, roll_belt,col = classe, alpha= 0.1)
qplot(pitch_belt, roll_belt,col = classe, alpha= 0.1)
qplot(pitch_belt, yaw_belt,col = classe, alpha= 0.1)
qplot(pitch_belt, yaw_belt,col = classe, alpha= 0.01)
qplot(pitch_belt, yaw_belt,col = classe, alpha= I(0.01))
qplot(pitch_belt, yaw_belt,col = classe, alpha= I(0.1))
qplot(pitch_belt, yaw_belt,col = classe, alpha= I(0.2))
qplot(pitch_belt, roll_belt,col = classe, alpha= I(0.2))
names(train)
qplot(magnet_forearm_x, magnet_forearm_y,col = classe, alpha= I(0.2))
qplot(magnet_forearm_x, magnet_forearm_z,col = classe, alpha= I(0.2))
qplot(magnet_forearm_y, magnet_forearm_z,col = classe, alpha= I(0.2))
qplot(magnet_forearm_x, magnet_forearm_y,col = classe, alpha= I(0.2))
qplot(magnet_dumbbell_x, magnet_dumbbell_y,col = classe, alpha= I(0.2))
qplot(magnet_dumbbell_z, magnet_dumbbell_y,col = classe, alpha= I(0.2))
qplot(gyros_dumbbell_z, gyros_dumbbell_y,col = classe, alpha= I(0.2))
qplot(magnet_arm_z, magnet_arm_y,col = classe, alpha= I(0.2))
trainpca <- train(train[-60], method = "pca", thresh = 0.95)
trainpca <- preProcess(train[-60], method = "pca", thresh = 0.95)
trainpca <- preProcess(train[,-c(1,2,6,60)], method = "pca", thresh = 0.95)
str(train)
trainpca <- preProcess(train[,-c(1,2,5,6,60)], method = "pca", thresh = 0.95)
trainpca
trainpca <- preProcess(train[,-c(1,2,5,6,60)], method = "pca", thresh = 0.8)
trainpca
trainPC <- predict(trainpca, train[,-c(1,2,5,6,60)])
plot(trainPC[,1],trainPC[,2], col = classe)
qplot(trainPC[,1],trainPC[,2], col = classe, alpha = I(0.2))
qplot(trainPC[,1],trainPC[,2], col = classe, alpha = I(0.5))
trainpca <- preProcess(train[,-c(1,2,5,6,60)], method = "pca", thresh = 0.5)
trainpca
qplot(pitch_forearm, yaw_forearm,col = classe, alpha= I(0.2))
qplot(roll_forearm, yaw_forearm,col = classe, alpha= I(0.2))
qplot(roll_forearm, pitch_forearm,col = classe, alpha= I(0.2))
qplot(roll_forearm, yaw_forearm,col = classe, alpha= I(0.2))
training <- read.csv("pml-training.csv", stringsAsFactors = FALSE)
testing <- read.csv("pml-testing.csv", stringsAsFactors = FALSE)
training$classe <- factor(training$classe)
inTrain <- createDataPartition(training$classe, p=0.7, list = FALSE)
train <- training[inTrain, ]
validate <- training[-inTrain,]
ind <- numeric()
for (i in 1:ncol(train)){
if(sum(is.na(train[,i])>0) | sum(train[,i]=="")>0){
ind <- c(ind, i)
}
}
train <- train[,-ind]
validate <- validate[,-ind]
sort(names(train))
label <-train$classe
trainX <- train[,c("pitch_forearm","roll_forearm","yaw_forearm","pitch_belt","roll_belt","yaw_belt")]
validateX <- validate[,c("pitch_forearm","roll_forearm","yaw_forearm","pitch_belt","roll_belt","yaw_belt")]
combined <- rbind.data.frame(trainX, validateX)
knn <- train(combined, label, method = "knn", preProcess = c("center", "scale"), tuneLength = 10, trControl = trainControl(method = "boot"))
allX <- training[,c("pitch_forearm","roll_forearm","yaw_forearm","pitch_belt","roll_belt","yaw_belt")]
label <- training$classe
knn <- train(allX, label, method = "knn", preProcess = c("center", "scale"), tuneLength = 10, trControl = trainControl(method = "boot"))
testX <- testing[,c("pitch_forearm","roll_forearm","yaw_forearm","pitch_belt","roll_belt","yaw_belt")]
pre <- predict(knn, testX)
pre
lab <- c(seq(0,18),1,1)
detach(train)
attach(testX)
qplot(pitch_belt, roll_belt,col = lab)
testX
qplot(pitch_belt, roll_belt)
testX
qplot(pitch_belt, roll_belt,col = lab)
length(lab)
lab <- c(rep(0,18),1,1)
qplot(pitch_belt, roll_belt,col = lab)
qplot(pitch_belt, yaw_belt,col = lab)
a<-"A"
b<-"B"
c <-"C"
d <-"D"
e <- "E"
c(b,a,b,a,a,e,d,b,a,a,b,c,b,a,e,e,a,b,b,b)
lab1 <- c(b,a,b,a,a,e,d,b,a,a,b,c,b,a,e,e,a,b,b,b)
qplot(pitch_belt, yaw_belt,col = lab1, alpha = (lab+1)/2)
qplot(pitch_belt, yaw_belt,col = lab1, alpha = I((lab+)/2))
qplot(pitch_belt, yaw_belt,col = lab1, alpha = (lab+2)/3)
qplot(pitch_belt, yaw_belt,col = lab1
)
qplot(pitch_belt, yaw_belt,col = lab1, shape = lab)
qplot(pitch_belt, yaw_belt,col = lab1, shape = factor(lab))
qplot(roll_belt, yaw_belt,col = lab1, shape = factor(lab))
qplot(roll_forearm, yaw_forearm,col = lab1, shape = factor(lab))
detach(testX)
attach(train)
detach(testX)
qplot(roll_forearm, yaw_forearm,col = lab1, shape = factor(lab))
names(train)
qplot(pitch_belt, roll_belt,col = classe, alpha= I(0.2))
sort(names(train))
qplot(accel_dumbbell_y, accel_dumbbell_z,col = classe, alpha= I(0.2))
qplot(testing$accel_dumbbell_y, testing$accel_dumbbell_z, shape=factor(lab))
lab[20]=2
qplot(testing$accel_dumbbell_y, testing$accel_dumbbell_z, shape=factor(lab))
qplot(accel_dumbbell_y, accel_dumbbell_z,col = classe, alpha= I(0.2))
qplot(accel_dumbbell_y, accel_dumbbell_x,col = classe, alpha= I(0.2))
qplot(testing$accel_dumbbell_y, testing$accel_dumbbell_x, shape=factor(lab))
trainX <- train[,c("pitch_forearm","roll_forearm","yaw_forearm","pitch_belt","roll_belt","yaw_belt", "accel_dumbbell_x", "accel_dumbbell_y", "accel_dumbbell_z")]
validateX <- validate[,c("pitch_forearm","roll_forearm","yaw_forearm","pitch_belt","roll_belt","yaw_belt", "accel_dumbbell_x", "accel_dumbbell_y", "accel_dumbbell_z")]
knn <- train(trainX, label, method = "knn", preProcess = c("center", "scale"), tuneLength = 10, trControl = trainControl(method = "boot"))
label <-training$classe
label <-train$classe
trainX <- train[,c("pitch_forearm","roll_forearm","yaw_forearm","pitch_belt","roll_belt","yaw_belt", "accel_dumbbell_x", "accel_dumbbell_y", "accel_dumbbell_z")]
knn <- train(trainX, label, method = "knn", preProcess = c("center", "scale"), tuneLength = 10, trControl = trainControl(method = "boot"))
pre <- predict(knn, validateX)
confusionMatrix(pre, validate$classe)
testX <- testing[,c("pitch_forearm","roll_forearm","yaw_forearm","pitch_belt","roll_belt","yaw_belt", "accel_dumbbell_x", "accel_dumbbell_y", "accel_dumbbell_z")]
pre <- predict(knn, testX)
pre
training <- read.csv("pml-training.csv", stringsAsFactors = FALSE)
testing <- read.csv("pml-testing.csv", stringsAsFactors = FALSE)
training$classe <- factor(training$classe)
ind <- numeric()
for (i in 1:ncol(training)){
if(sum(is.na(train[,i])>0) | sum(train[,i]=="")>0){
ind <- c(ind, i)
}
}
str(training)
str(train)
summary(training$num_window)
attach(training)
qplot(pitch_forearm, yaw_forearm,col = classe, size=1, alpha= I(0.2))
attach(training)
qplot(pitch_forearm, yaw_forearm,col = classe, size=I(1), alpha= I(0.2))
attach(training)
qplot(pitch_forearm, yaw_forearm,col = classe, size=I(1)
)
qplot(pitch_forearm, yaw_forearm,col = classe, size=I(1), alpha= I(0.5))
qplot(pitch_forearm, yaw_forearm,col = classe, size=I(2), alpha= I(0.5))
qplot(pitch_forearm, roll_forearm,col = classe, size=I(2), alpha= I(0.5))
qplot(yaw_forearm, roll_forearm,col = classe, size=I(2), alpha= I(0.5))
qplot(roll_forearm, yaw_forearm,col = classe, size=I(1), alpha= I(0.5))
trainX <- training[,c("roll_forearm","yaw_forearm","pitch_belt","roll_belt","yaw_belt")]
validateX <- validate[,c("roll_forearm","yaw_forearm","pitch_belt","roll_belt","yaw_belt")]
label <- training$classe
knn <- train(trainX, label, method = "knn", preProcess = c("center", "scale"), tuneLength = 10, trControl = trainControl(method = "boot"))
testX <- testing[,c("roll_forearm","yaw_forearm","pitch_belt","roll_belt","yaw_belt")]
pre <- predict(knn, testX)
pre
qplot(pitch_belt, roll_belt,col = classe, size=I(1), alpha= I(0.5))
qplot(pitch_belt, yaw_belt,col = classe, size=I(1), alpha= I(0.5))
roll
qplot(roll_belt, yaw_belt,col = classe, size=I(1), alpha= I(0.5))
qplot(yaw_belt, roll_belt,col = classe, size=I(1), alpha= I(0.5))
par(mfrow(1,2))
?par
par(mfrow=c(1,2))
qplot(yaw_belt, roll_belt,col = classe, size=I(1), alpha= I(0.5))
qplot(roll_belt, yaw_belt,col = classe, size=I(1), alpha= I(0.5))
par(mfrow=(1,2))
require(gridExtra)
install.packages("gridExtra")
require(gridExtra)
qplot(yaw_belt, roll_belt,col = classe, size=I(1), alpha= I(0.5))
qplot(yaw_belt, pitch_belt,col = classe, size=I(1), alpha= I(0.5))
names(training)
names(train)
qplot(yaw_arm, pitch_arm,col = classe, size=I(1), alpha= I(0.5))
qplot(roll_arm, pitch_arm,col = classe, size=I(1), alpha= I(0.5))
qplot(roll_arm, yaw_arm,col = classe, size=I(1), alpha= I(0.5))
qplot(roll_dumbbell, yaw_dumbbell,col = classe, size=I(1), alpha= I(0.5))
qplot(roll_dumbbell, pitch_dumbbell,col = classe, size=I(1), alpha= I(0.5))
qplot(yaw_dumbbell, pitch_dumbbell,col = classe, size=I(1), alpha= I(0.5))
qplot(pitch_dumbbell,fill = classe, size=I(1), alpha= I(0.5))
qplot(total_accel_forearm,fill = classe, size=I(1), alpha= I(0.5))
qplot(total_accel_arm,fill = classe, size=I(1), alpha= I(0.5))
qplot(total_accel_arm,total_accel_forearm,col = classe, size=I(1), alpha= I(0.5))
qplot(total_accel_bell,fill = classe, size=I(1), alpha= I(0.5))
qplot(total_accel_dumbbell,fill = classe, size=I(1), alpha= I(0.5))
qplot(total_accel_dumbbell, total_accel_forearm,fill = classe, size=I(2), alpha= I(0.5))
qplot(total_accel_dumbbell, total_accel_forearm,col = classe, size=I(2), alpha= I(0.5))
qplot(total_accel_dumbbell, total_accel_forearm,col = classe, size=I(2), alpha= I(0.1))
qplot(total_accel_dumbbell, total_accel_forearm,col = classe, size=I(2), alpha= I(0.1), geom = "jitter")
qplot(total_accel_dumbbell, total_accel_forearm,col = classe, size=I(2), alpha= I(0.3), geom = "jitter")
names(train)
qplot(gyross_dumbbell_x, total_accel_forearm,col = classe, size=I(2), alpha= I(0.3), geom = "jitter")
qplot(gyros_dumbbell_x, total_accel_forearm,col = classe, size=I(2), alpha= I(0.3), geom = "jitter")
qplot(gyros_dumbbell_y, total_accel_forearm,col = classe, size=I(2), alpha= I(0.3), geom = "jitter")
qplot(gyros_dumbbell_z, total_accel_forearm,col = classe, size=I(2), alpha= I(0.3), geom = "jitter")
qplot(gyros_dumbbell_z, total_accel_forearm,col = classe, size=I(2), alpha= I(0.3), geom = "jitter", xlim=c(-5,10))
qplot(gyros_dumbbell_z, total_accel_forearm,col = classe, size=I(2), alpha= I(0.3), geom = "jitter", xlim=c(-3,3))
qplot(gyros_dumbbell_y, total_accel_forearm,col = classe, size=I(2), alpha= I(0.3), geom = "jitter", xlim=c(-3,3))
qplot(gyros_dumbbell_x, total_accel_forearm,col = classe, size=I(2), alpha= I(0.3), geom = "jitter", xlim=c(-3,3))
qplot(gyros_dumbbell_x, gyros_dumbbell_x,col = classe, size=I(2), alpha= I(0.3), geom = "jitter", xlim=c(-3,3), ylim=c(-3,3))
qplot(gyros_dumbbell_x, gyros_dumbbell_y,col = classe, size=I(2), alpha= I(0.3), geom = "jitter", xlim=c(-3,3), ylim=c(-3,3))
qplot(gyros_dumbbell_z, gyros_dumbbell_y,col = classe, size=I(2), alpha= I(0.3), geom = "jitter", xlim=c(-3,3), ylim=c(-3,3))
names(train)
qplot(magnet_belt_z, magnet_belt_y,col = classe, size=I(2), alpha= I(0.3), geom = "jitter", xlim=c(-3,3), ylim=c(-3,3))
qplot(magnet_belt_z, magnet_belt_y,col = classe, size=I(2), alpha= I(0.3), geom = "jitter"
)
qplot(magnet_belt_x, magnet_belt_y,col = classe, size=I(2), alpha= I(0.3), geom = "jitter")
qplot(magnet_belt_x, magnet_belt_z,col = classe, size=I(2), alpha= I(0.3), geom = "jitter")
qplot(magnet_belt_y, magnet_belt_z,col = classe, size=I(2), alpha= I(0.3), geom = "jitter")
qplot(magnet_belt_x, magnet_belt_y,col = classe, size=I(2), alpha= I(0.3), geom = "jitter")
qplot(magnet_arm_x, magnet_arm_y,col = classe, size=I(2), alpha= I(0.3), geom = "jitter")
qplot(magnet_arm_x, magnet_arm_z,col = classe, size=I(2), alpha= I(0.3), geom = "jitter")
qplot(magnet_forearm_x, magnet_arm_z,col = classe, size=I(2), alpha= I(0.3), geom = "jitter")
qplot(magnet_forearm_x, magnet_forearm_z,col = classe, size=I(2), alpha= I(0.3), geom = "jitter")
qplot(magnet_forearm_y, magnet_forearm_z,col = classe, size=I(2), alpha= I(0.3), geom = "jitter")
qplot(magnet_dumbbell_y, magnet_dumbbell_z,col = classe, size=I(2), alpha= I(0.3), geom = "jitter")
qplot(magnet_dumbbell_x, magnet_dumbbell_z,col = classe, size=I(2), alpha= I(0.3), geom = "jitter")
qplot(magnet_dumbbell_x, magnet_dumbbell_y,col = classe, size=I(2), alpha= I(0.3), geom = "jitter")
qplot(magnet_dumbbell_x, magnet_dumbbell_y,col = classe, size=I(2), alpha= I(0.3), geom = "jitter", ylim=c(-1000,1000))
qplot(magnet_dumbbell_x, magnet_dumbbell_z,col = classe, size=I(2), alpha= I(0.3), geom = "jitter")
trainX <- training[,c("pitch_forearm","roll_forearm","yaw_forearm","pitch_belt","roll_belt","yaw_belt", "magnet_dumbbell_x", "magnet_dumbbell_y", "magnet_dumbbell_z")]
testX <- testing[,c("pitch_forearm","roll_forearm","yaw_forearm","pitch_belt","roll_belt","yaw_belt", "magnet_dumbbell_x", "magnet_dumbbell_y", "magnet_dumbbell_z")]
knn <- train(trainX, label, method = "knn", preProcess = c("center", "scale"), tuneLength = 10, trControl = trainControl(method = "boot"))
pre <- predict(knn, testX)
pre
library(caret)
require(gridExtra)
training <- read.csv("pml-training.csv", stringsAsFactors = FALSE)
testing <- read.csv("pml-testing.csv", stringsAsFactors = FALSE)
training$classe <- factor(training$classe)
inTrain <- createDataPartition(y=training$classe, p=0.7, list = FALSE)
validate <- training[-inTrain,]
training <- training[inTrain,]
## data cleaning
ind <- numeric()
for (i in 1:ncol(training)){
if(sum(is.na(training[,i])>0) | sum(training[,i]=="")>0){
ind <- c(ind, i)
}
}
training <- training[,-ind]
validate <- validate[,-ind]
qplot(magnet_dumbbell_x, magnet_dumbbell_z,col = classe, size=I(2), alpha= I(0.3), geom = "jitter")
qplot(magnet_dumbbell_x, magnet_dumbbell_z,col = classe, size=I(2), alpha= I(0.3))
qplot(magnet_dumbbell_x, magnet_dumbbell_z,col = classe, size=I(1), alpha= I(0.3))
?trainControl
label <-training$classe
trainingX <- training[,c("pitch_forearm","roll_forearm","yaw_forearm","pitch_belt","roll_belt","yaw_belt", "magnet_dumbbell_x", "magnet_dumbbell_y", "magnet_dumbbell_z")]
validateX <- validate[,c("pitch_forearm","roll_forearm","yaw_forearm","pitch_belt","roll_belt","yaw_belt", "magnet_dumbbell_x", "magnet_dumbbell_y", "magnet_dumbbell_z")]
testX <- testing[,c("pitch_forearm","roll_forearm","yaw_forearm","pitch_belt","roll_belt","yaw_belt", "magnet_dumbbell_x", "magnet_dumbbell_y", "magnet_dumbbell_z")]
knnFit <- train(trainingX, label, method = "knn", preProcess = c("center", "scale"), tuneLength = 10, trControl = trainControl(method = "repeatedcv", repeats=3))
predict(knnFit, testingX)
predict(knnFit, testX)
set.seed(12345)
knnFit
plot(knnFit)
combined <- rbind.data.frame(trainX, validateX)
combined <- rbind.data.frame(trainX, validateX)
label2 <- c(training$classe, validate$classe)
knnFit <- train(combined, label2, method = "knn", preProcess = c("center", "scale"), tuneLength = 10, trControl = trainControl(method = "repeatedcv", repeats=3, number = 5))
length(label2)
nrow(combined)
nrow(training)
combined <- rbind.data.frame(trainingX, validateX)
nrow(combined)
knnFit <- train(combined, label2, method = "knn", preProcess = c("center", "scale"), tuneLength = 10, trControl = trainControl(method = "repeatedcv", repeats=3, number = 5))
knnFit
plot(knnFit)
pre <- predict(knnFit, testingX)
pre <- predict(knnFit, testX)
pre
confusionMatrix(knnFit)
label <-training$classe
trainingX <- training[,c("pitch_forearm","roll_forearm","yaw_forearm","pitch_belt","roll_belt","yaw_belt", "magnet_dumbbell_x", "magnet_dumbbell_y", "magnet_dumbbell_z")]
validateX <- validate[,c("pitch_forearm","roll_forearm","yaw_forearm","pitch_belt","roll_belt","yaw_belt", "magnet_dumbbell_x", "magnet_dumbbell_y", "magnet_dumbbell_z")]
testX <- testing[,c("pitch_forearm","roll_forearm","yaw_forearm","pitch_belt","roll_belt","yaw_belt", "magnet_dumbbell_x", "magnet_dumbbell_y", "magnet_dumbbell_z")]
knnFit <- train(trainingX, label, method = "knn", preProcess = c("center", "scale"), tuneLength = 10, trControl = trainControl(method = "repeatedcv", repeats=3))
plot(knnFit)
confusionMatrix(knnFit)
summary(confusionMatrix(knnFit))
?confusionMatrix
confusionMatrix(knnFit)$Prediction
str(confusionMatrix)
str(confusionMatrix(knnFit))
confusionMatrix(knnFit)$table
table <- confusionMatrix(knnFit)$table
table[1,1]
n <- 0
for (i in 1:5){
n <- n+table[i,i]
}
n
knnFit
plot(knnFit)
pre <- predict(knnFit, validateX)
confusionMatrix(pre, validate$classe)
predict(knnFit, testX)
allX <- rbind.data.frame(trainX, validateX)
AllLab <- c(training$classe, validate$classe)
knnFit <- train(allX, AllLab, method = "knn", preProcess = c("center", "scale"), tuneGrid=expand.grid(k=5),tuneLength = 10, trControl = trainControl(method = "repeatedcv", repeats=3))
allX <- rbind.data.frame(trainingX, validateX)
allLab <- c(training$classe, validate$classe)
knnFit <- train(allX, AllLab, method = "knn", preProcess = c("center", "scale"), tuneGrid=expand.grid(k=5),tuneLength = 10, trControl = trainControl(method = "repeatedcv", repeats=3))
plot(knnFit)
predict(knnFit, testX)
knnFit <- train(allX, AllLab, method = "knn", preProcess = c("center", "scale"), tuneGrid=expand.grid(k=5))
predict(knnFit, testX)
knnFit <- train(allX, AllLab, method = "knn", preProcess = c("center", "scale"), k=5)
gc()
gc(reset=T)
knnFit <- train(trainingX, label,
method = "knn",
preProcess = c("center", "scale"),
tuneLength = 10,
tuneGrid = expand.grid(.k=1:9)
trControl = trainControl(method = "repeatedcv", repeats=3))
knnFit <- train(trainingX, label,
method = "knn",
preProcess = c("center", "scale"),
tuneLength = 10,
tuneGrid = expand.grid(.k=1:9),
trControl = trainControl(method = "repeatedcv", repeats=3))
plot(knnFit)
predict(knnFit, testX)
pre <- predict(knnFit, validateX)
confusionMatrix(pre, validate$classe)
predict(knnFit, testX)
ans <- predict(knnFit, testX)
ans
ans <- as.character(ans)
ans
pml_write_files = function(x){
n = length(x)
for(i in 1:n){
filename = paste0("problem_id_",i,".txt")
write.table(x[i],file=filename,quote=FALSE,row.names=FALSE,col.names=FALSE)
}
}
setwd("ans")
pml_write_files(ans)
